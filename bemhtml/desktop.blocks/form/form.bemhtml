block form {
	tag: 'form',
	content: {
		var questions = this.ctx.questions,
				content = [];

		content.push({
			elem: 'fieldset',
			content: []
		});

		questions.forEach(function(item, i) {
			content[0].content.push({
				elem: 'line',
				type: item.type,
				validation: item.validation,
				text: item.text,
				num: i + 1,
				checkboxes: item.checkboxes
			});
		}); 

		content.push(this.ctx.content);

		return content;
	}	
}

//form fieldset
block form, elem fieldset {
	tag: 'fieldset'
}

//form line
block form, elem line {
	mix: [{ block: 'slide', js: true }]
	content: {
		var content = [
			{
				elem: 'lineNum',
				content: this.ctx.num
			},
			{
				elem: 'switcher',
				mix: [{ block: 'slide', elem: 'switcher' }]
			},
			{
				elem: 'content',
				mix: [{ block: 'slide', elem: 'content' }],
				content: []
			}
		];

		content[2].content.push({
			block: 'b-text',
			mix: [{ block: 'form', elem: 'label' }],
			content: this.ctx.text
		});

		if (this.ctx.checkboxes) {
			this.ctx.checkboxes.forEach(function(item) {
				content[2].content.push({
					elem: 'checkbox',
					content: item
				});
			});
		}	

		content[2].content.push({
			elem: 'input',
			type: this.ctx.type,
			validation: this.ctx.validation
		});

		return content;
	}
}

//line number
block form, elem lineNum {
	tag: 'span'
}

//checkbox line
block form, elem checkbox, content: {
	block: 'checkbox',
	content: this.ctx.content
}

//form input elements
//could be text input or textarea
//depended on type param
block form, elem input {
	tag: {
		var ctx = this.ctx;

		if (ctx.type == 'textarea') {
			return 'textarea';
		} else {
			return 'input';
		}
	}

	attrs: {
		var result = {},
				ctx = this.ctx,
				props = ctx.validation;

		for (prop in props) {
			if (props.hasOwnProperty(prop)) result[prop] = props[prop];
		}
		
		if (this.ctx.type !== 'textarea') {
			result.type = ctx.type;
		} else {
			result.rows = 6;
		}

		return result;
	}
}